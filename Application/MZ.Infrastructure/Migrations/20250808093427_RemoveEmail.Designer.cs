// <auto-generated />
using System;
using MZ.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MZ.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250808093427_RemoveEmail")]
    partial class RemoveEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("MZ.Domain.Entities.AIOptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("Cuda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("GpuId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("IoU")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsChecked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ModelType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OnnxModel")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PrimeGpu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("AIOption");
                });

            modelBuilder.Entity("MZ.Domain.Entities.AppSettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUsernameSave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("LastestUsername")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSetting");
                });

            modelBuilder.Entity("MZ.Domain.Entities.CalibrationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ActivationThresholdRatio")
                        .HasColumnType("REAL");

                    b.Property<double>("BoundaryArtifact")
                        .HasColumnType("REAL");

                    b.Property<double>("GainRegion")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxImageWidth")
                        .HasColumnType("INTEGER");

                    b.Property<double>("OffsetRegion")
                        .HasColumnType("REAL");

                    b.Property<double>("RelativeWidthRatio")
                        .HasColumnType("REAL");

                    b.Property<int>("SensorImageWidth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Calibration");
                });

            modelBuilder.Entity("MZ.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AIOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUsing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AIOptionId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("MZ.Domain.Entities.CurveControlEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CurveControl");
                });

            modelBuilder.Entity("MZ.Domain.Entities.FilterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Brightness")
                        .HasColumnType("REAL");

                    b.Property<int>("ColorMode")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Contrast")
                        .HasColumnType("REAL");

                    b.Property<float>("Sharpness")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Zoom")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Filter");
                });

            modelBuilder.Entity("MZ.Domain.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Filename")
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("MZ.Domain.Entities.MaterialControlEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("XMax")
                        .HasColumnType("REAL");

                    b.Property<double>("XMin")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialControl");
                });

            modelBuilder.Entity("MZ.Domain.Entities.MaterialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Blur")
                        .HasColumnType("REAL");

                    b.Property<double>("Density")
                        .HasColumnType("REAL");

                    b.Property<double>("EdgeBinary")
                        .HasColumnType("REAL");

                    b.Property<double>("HighLowRate")
                        .HasColumnType("REAL");

                    b.Property<double>("Transparency")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Material");
                });

            modelBuilder.Entity("MZ.Domain.Entities.ObjectDetectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ObjectDetection");
                });

            modelBuilder.Entity("MZ.Domain.Entities.UserButtonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisibility")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserSettingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId");

                    b.ToTable("UserButton");
                });

            modelBuilder.Entity("MZ.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LastLoginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("UsingDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MZ.Domain.Entities.UserSettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Theme")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSetting");
                });

            modelBuilder.Entity("MZ.Domain.Entities.ZeffectControlEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Check")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<double>("Max")
                        .HasColumnType("REAL");

                    b.Property<double>("Min")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ZeffectControl");
                });

            modelBuilder.Entity("MZ.Domain.Entities.CalibrationEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.UserEntity", "User")
                        .WithOne("Calibration")
                        .HasForeignKey("MZ.Domain.Entities.CalibrationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MZ.Domain.Entities.CategoryEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.AIOptionEntity", "AIOption")
                        .WithMany("Categories")
                        .HasForeignKey("AIOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AIOption");
                });

            modelBuilder.Entity("MZ.Domain.Entities.CurveControlEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.UserEntity", "User")
                        .WithMany("Curve")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MZ.Domain.Entities.FilterEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.UserEntity", "User")
                        .WithOne("Filter")
                        .HasForeignKey("MZ.Domain.Entities.FilterEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MZ.Domain.Entities.MaterialControlEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.MaterialEntity", "Material")
                        .WithMany("MaterialControls")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("MZ.Domain.Entities.MaterialEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.UserEntity", "User")
                        .WithOne("Material")
                        .HasForeignKey("MZ.Domain.Entities.MaterialEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MZ.Domain.Entities.ObjectDetectionEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.ImageEntity", "Image")
                        .WithMany("ObjectDetections")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MZ.Domain.Entities.UserButtonEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.UserSettingEntity", "UserSetting")
                        .WithMany("Buttons")
                        .HasForeignKey("UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSetting");
                });

            modelBuilder.Entity("MZ.Domain.Entities.UserSettingEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.UserEntity", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("MZ.Domain.Entities.UserSettingEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MZ.Domain.Entities.ZeffectControlEntity", b =>
                {
                    b.HasOne("MZ.Domain.Entities.UserEntity", "User")
                        .WithMany("Zeffect")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MZ.Domain.Entities.AIOptionEntity", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("MZ.Domain.Entities.ImageEntity", b =>
                {
                    b.Navigation("ObjectDetections");
                });

            modelBuilder.Entity("MZ.Domain.Entities.MaterialEntity", b =>
                {
                    b.Navigation("MaterialControls");
                });

            modelBuilder.Entity("MZ.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Calibration");

                    b.Navigation("Curve");

                    b.Navigation("Filter");

                    b.Navigation("Material");

                    b.Navigation("UserSetting");

                    b.Navigation("Zeffect");
                });

            modelBuilder.Entity("MZ.Domain.Entities.UserSettingEntity", b =>
                {
                    b.Navigation("Buttons");
                });
#pragma warning restore 612, 618
        }
    }
}
